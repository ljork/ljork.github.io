[{"title":"输入url后的加载过程","date":"2017-01-05T14:22:40.000Z","path":"2017/01/05/输入url后的加载过程/","text":"输入url后的加载过程###计算机网络体系结构 应用层(HTTP、SMTP、FTP、POP3) 运输层(TCP、UDP) 网络层(IP(路由器)) 数据链路层(网桥(CSMA/CD、PPP)) 物理层(集线器) 1、查找域名对应IP地址这一步包括 DNS 具体的查找过程，包括：浏览器缓存-&gt;系统缓存-&gt;路由器缓存… (1) 浏览器搜索自己的 DNS 缓存（维护一张域名与 IP 地址的对应表）； (2) 搜索操作系统中的 DNS 缓存（维护一张域名与 IP 地址的对应表）； (3) 搜索操作系统的 hosts 文件（ Windows 环境下，维护一张域名与 IP 地址的对应表）； (4) 操作系统将域名发送至 LDNS（本地区域名服务器），LDNS 查询 自己的 DNS 缓存（一般查找成功率在 80% 左右），查找成功则返回结果，失败则发起一个迭代 DNS 解析请求： ①LDNS 向 Root Name Server （根域名服务器，如 com、net、org等的解析的顶级域名服务器的地址）发起请求，此处，Root Name Server 返回 com 域的顶级域名服务器的地址； ② LDNS 向 com 域的顶级域名服务器发起请求，返回 baidu.com 域名服务器地址； ③ LDNS 向 baidu.com 域名服务器发起请求，得到 www.baidu.com 的 IP 地址； (5) LDNS 将得到的 IP 地址返回给操作系统，同时自己也将 IP 地址缓存起来； (6) 操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来； 2、建立连接(TCP的三次握手)(1) 主机向服务器发送一个建立连接的请求； (2) 服务器接到请求后发送同意连接的信号； (3) 主机接到同意连接的信号后，再次向服务器发送了确认信号 ; 1注意：这里的三次握手中主机两次向服务器发送确认，第二次是为了防止已失效的连接请求报文段传至服务器导致错误。 3、构建网页(1) 浏览器根据 URL 内容生成 HTTP 请求，请求中包含请求文件的位置、请求文件的方式等等； (2) 服务器接到请求后，会根据 HTTP 请求中的内容来决定如何获取相应的 HTML 文件； (3) 服务器将得到的 HTML 文件发送给浏览器； (4) 在浏览器还没有完全接收 HTML 文件时便开始渲染、显示网页； (5) 在执行 HTML 中代码时，根据需要，浏览器会继续请求图片、音频、视频、CSS、JS等文件，过程同请求 HTML ； 1234567浏览器渲染展示网页过程1. HTML代码转化为DOM(DOM Tree)2. CSS代码转化成CSSOM（CSS Object Model）3. 结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）(Render Tree)4. 生成布局（layout），即将所有渲染树的所有节点进行平面合成5. 将布局绘制（paint）在屏幕上 4. 断开连接(TCP的四次挥手)(1) 主机向服务器发送一个断开连接的请求； (2) 服务器接到请求后发送确认收到请求的信号；(此时服务器可能还有数据要发送至主机) (3) 服务器向主机发送断开通知；(此时服务器确认没有要向主机发送的数据) (4) 主机接到断开通知后断开连接并反馈一个确认信号，服务器收到确认信号后断开连接； 1注意：这里的四次挥手中服务器两次向主机发送消息，第一次是回复主机已收到断开的请求，第二次是向主机确认是否断开，确保数据传输完毕。","tags":[{"name":"网络技术","slug":"网络技术","permalink":"http://yoursite.com/tags/网络技术/"}]},{"title":"js性能优化","date":"2016-11-26T12:09:35.000Z","path":"2016/11/26/js性能优化/","text":"js性能优化下面是一些关于客户端JS性能的一些优化的小技巧：1、关于JS的循环，循环是一种常用的流程控制。JS提供了三种循环：for(;;)、while()、for(in)。在这三种循环中 for(in)的效率最差，因为它需要查询Hash键，因此应尽量少用for(in)循环，for(;;)、while()循环的性能基本持平。当然，推 荐使用for循环，如果循环变量递增或递减，不要单独对循环变量赋值，而应该使用嵌套的++或－－运算符。 2、如果需要遍历数组，应该先缓存数组长度，将数组长度放入局部变量中，避免多次查询数组长度。 3、局部变量的访问速度要比全局变量的访问速度更快，因为全局变量其实是window对象的成员，而局部变量是放在函数的栈里的。 4.尽量少使用eval，每次使用eval需要消耗大量时间，这时候使用JS所支持的闭包可以实现函数模板。 5.尽量避免对象的嵌套查询，对于obj1.obj2.obj3.obj4这个语句，需要进行至少3次查询操作，先检查obj1中是否包含 obj2，再检查obj2中是否包含obj3，然后检查obj3中是否包含obj4…这不是一个好策略。应该尽量利用局部变量，将obj4以局部变量 保存，从而避免嵌套查询。 6.使运算符时，尽量使用+＝，－＝、*＝、\\=等运算符号，而不是直接进行赋值运算。 7.[顶]当需要将数字转换成字符时，采用如下方式：”” + 1。从性能上来看，将数字转换成字符时，有如下公式：(“” +) &gt; String() &gt; .toString() &gt; new String()。String()属于内部函数，所以速度很快。而.toString()要查询原型中的函数，所以速度逊色一些，new String()需要重新创建一个字符串对象，速度最慢。 8.[顶]当需要将浮点数转换成整型时，应该使用Math.floor()或者Math.round()。而不是使用parseInt(),该方法用于将字符串转换成数字。而且Math是内部对象，所以Math.floor()其实并没有多少查询方法和调用时间，速度是最快的。 9.尽量作用JSON格式来创建对象，而不是var obj=new Object()方法。因为前者是直接复制，而后者需要调用构造器，因而前者的性能更好。 10.当需要使用数组时，也尽量使用JSON格式的语法，即直接使用如下语法定义数组：[parrm,param,param…],而不是采用 new Array(parrm,param,param…)这种语法。因为使用JSON格式的语法是引擎直接解释的。而后者则需要调用Array的构造器。 11.[顶]对字符串进行循环操作，例如替换、查找，就使用正则表达式。因为JS的循环速度比较慢，而正则表达式的操作是用C写成的API，性能比较好。 最后有一个基本原则，对于大的JS对象，因为创建时时间和空间的开销都比较大，因此应该尽量考虑采用缓存。","tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"性能优化","slug":"性能优化","permalink":"http://yoursite.com/tags/性能优化/"}]},{"title":"Hello World","date":"2016-05-05T14:11:40.000Z","path":"2016/05/05/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]